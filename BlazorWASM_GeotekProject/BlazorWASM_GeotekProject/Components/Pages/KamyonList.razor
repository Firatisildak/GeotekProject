@page "/"
@attribute [StreamRendering]
@using BlazorWASM_GeotekProject.Components.Models
@using ClosedXML.Excel
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Kamyon Listesi</PageTitle>

<MudCarousel Class="mud-width-full" Style="height: 400px;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
    <MudCarouselItem Transition="transition">
        <img src="kantarbir.png" alt="Image 1" style="width: 100%; height: 100%; object-fit: contain;" />
    </MudCarouselItem>
    <MudCarouselItem Transition="transition">
        <img src="kantariki.png" alt="Image 2" style="width: 100%; height: 100%; object-fit: contain;" />
    </MudCarouselItem>
    <MudCarouselItem Transition="transition">
        <img src="kantaruc.png" alt="Image 3" style="width: 100%; height: 100%; object-fit: contain;" />
    </MudCarouselItem>
</MudCarousel>

<p>
    <a href="/addKamyon" class="btn btn-info">Yeni Kamyon Ekle</a>
</p>
    <MudButton Disabled="@exporting" @onclick="ExportToExcel" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Custom.FileFormats.FileExcel">
        @if (exporting)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"></MudProgressCircular>
        <MudText Class="ms-2">Processing..</MudText>
    }
    else
    {
        <MudText>Export Excel</MudText>
    }
    </MudButton>

    @if (kamyonList == null)
{
    <p><em>Yükleniyor...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Plaka</th>
                <th>Hammadde</th>
                <th>Miktar</th>
                <th>Oluşturulma Tarihi</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kamyon in kamyonList)
            {
                <tr>
                    <td>@kamyon.Plaka</td>
                    <td>@kamyon.Hammadde</td>
                    <td>@kamyon.Miktar</td>
                    <td>@kamyon.CreatedDate.ToString("dd/MM/yyyy")</td>
                    <td>
                        <a href="/editkamyon/@kamyon.Id" class="btn btn-primary">Düzenle</a>
                        <a href="/deletekamyon/@kamyon.Id" class="btn btn-danger">Sil</a>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Kamyon[]? kamyonList;
    bool importing = false;
    bool exporting = false;
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        await LoadKamyonData();
    }

    private async Task LoadKamyonData()
    {
        kamyonList = await Http.GetFromJsonAsync<Kamyon[]>("http://localhost:5129/api/Kamyons/GetAllKamyon");
    }
    private async Task<byte[]> CreateExcelFile()
    {
        if (kamyonList == null)
        {
            await LoadKamyonData();
        }

        using (XLWorkbook workbook = new())
        {
            var worksheet = workbook.Worksheets.Add("Kamyon Listesi");

            worksheet.Cell(1, 1).Value = "Plaka";
            worksheet.Cell(1, 2).Value = "Hammadde";
            worksheet.Cell(1, 3).Value = "Miktar";
            worksheet.Cell(1, 4).Value = "Oluşturulma Tarihi";

            for (int i = 0; i < kamyonList.Length; i++)
            {
                worksheet.Cell(i + 2, 1).Value = kamyonList[i].Plaka;
                worksheet.Cell(i + 2, 2).Value = kamyonList[i].Hammadde;
                worksheet.Cell(i + 2, 3).Value = kamyonList[i].Miktar;
                worksheet.Cell(i + 2, 4).Value = kamyonList[i].CreatedDate.ToString("dd/MM/yyyy");
            }

            using (var stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                return stream.ToArray();
            }
        }
    }

    private async Task ExportToExcel()
    {
        exporting = true;
        var excelBytes = await CreateExcelFile();
        await JS.InvokeVoidAsync("downloadFileFromBytes", "Kamyon_Listesi.xlsx", excelBytes);
        exporting = false;
    }
}

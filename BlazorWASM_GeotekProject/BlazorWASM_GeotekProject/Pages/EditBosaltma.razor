@page "/editBosaltma/{id}"
@using BlazorWASM_GeotekProject.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Boşaltma Düzenle</h3>
<hr />
<form>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="BosaltmaDurumuInput">Boşaltma Durumu</label>
                <select id="BosaltmaDurumuInput" class="form-control" @onchange="(e) => bosaltma.BosaltmaDurumu = Convert.ToBoolean(e.Value)">
                    <option value="true">Boşaltıldı</option>
                    <option value="false">Boşaltılmadı</option>
                </select>
            </div>
            <div class="form-group">
                <label for="PlakaInput">Kamyon Plaka</label>
                <input id="PlakaInput" class="form-control" @bind="bosaltma.Plaka" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-success" @onclick="UpdateBosaltmaInfo" value="Güncelle" />
                <input type="button" class="btn btn-danger" @onclick="Cancel" value="İptal" />
            </div>
        </div>
    </div>
</form>

@code {
    [Parameter]
    public string id { get; set; }
    private Bosaltma bosaltma = new Bosaltma();
    private Kamyon[] kamyonList;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            bosaltma = await Http.GetFromJsonAsync<Bosaltma>($"http://localhost:5129/api/Bosaltmas/GetByIdBosaltma?id={id}");

            kamyonList = await Http.GetFromJsonAsync<Kamyon[]>("http://localhost:5129/api/Kamyons/GetAllKamyon");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Bir hata oluştu: {ex.Message}");
        }
    }

    private async Task UpdateBosaltmaInfo()
    {
        if (string.IsNullOrWhiteSpace(bosaltma.Plaka))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Plaka boş olamaz.");
            return;
        }

        var selectedKamyon = kamyonList.FirstOrDefault(k => k.Plaka == bosaltma.Plaka);
        if (selectedKamyon != null)
        {
            bosaltma.KamyonId = selectedKamyon.Id;
            try
            {
                await Http.PutAsJsonAsync("http://localhost:5129/api/Bosaltmas/UpdateBosaltma", bosaltma);
                await JSRuntime.InvokeVoidAsync("alert", "Güncelleme Başarılı");
                NavigationManager.NavigateTo("/bosaltmaList");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Güncelleme sırasında bir hata oluştu: {ex.Message}");
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Kamyon bulunamadı, lütfen geçerli bir plaka girin.");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/bosaltmaList");
    }
}
